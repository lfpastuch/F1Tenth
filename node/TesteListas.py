#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 11 19:27:33 2020

@author: yohas

Programa que varre lista e acha o maior gap de valores diferentes de zero.
"""
import time

#expList=[2.203, 2.178, 2.187, 2.182, 2.19, 2.176, 2.168, 2.168, 2.218, 2.198, 2.197, 2.122, 2.174, 2.177, 2.181, 2.185, 2.166, 2.188, 2.173, 2.186, 2.169, 2.192, 2.231, 2.229, 2.226, 2.224, 2.24, 2.23, 2.239, 2.221, 2.232, 2.277, 2.289, 2.283, 2.305, 2.298, 2.27, 2.289, 2.272, 2.334, 2.282, 2.287, 2.26, 2.33, 2.293, 2.317, 2.293, 2.28, 2.342, 2.32, 2.329, 2.316, 2.329, 2.391, 2.368, 2.387, 2.399, 2.384, 2.375, 2.449, 2.434, 2.447, 2.431, 2.423, 2.438, 2.455, 2.43, 2.451, 2.424, 2.434, 2.48, 2.481, 2.439, 2.501, 2.512, 2.502, 2.509, 2.546, 2.565, 2.536, 2.596, 2.581, 2.589, 2.638, 2.616, 2.641, 2.625, 2.586, 2.593, 2.635, 2.639, 2.677, 2.677, 2.677, 2.742, 2.729, 2.733, 2.773, 2.777, 2.799, 2.835, 2.762, 2.778, 2.763, 2.806, 2.851, 2.847, 2.908, 2.877, 2.904, 2.917, 2.957, 2.962, 2.97, 2.953, 2.977, 2.991, 3.007, 3.021, 3.012, 3.086, 3.094, 3.14, 3.145, 3.106, 3.106, 3.114, 3.151, 3.195, 3.239, 3.218, 3.281, 3.319, 3.312, 3.306, 3.303, 3.348, 3.407, 3.424, 3.448, 3.475, 3.527, 3.534, 3.534, 3.554, 3.558, 3.625, 3.647, 3.682, 3.739, 3.734, 3.697, 3.786, 3.768, 3.809, 3.9, 3.97, 3.978, 3.984, 3.995, 4.034, 4.101, 4.146, 4.099, 4.166, 4.194, 4.293, 4.281, 4.276, 4.345, 4.39, 4.427, 4.405, 4.499, 4.569, 4.587, 4.602, 4.672, 4.768, 4.76, 4.768, 4.808, 4.913, 4.891, 4.972, 5.089, 5.068, 5.148, 5.223, 5.187, 5.282, 5.408, 5.382, 5.499, 5.593, 5.599, 5.696, 5.772, 5.817, 5.979, 5.981, 6.109, 6.182, 6.274, 10.347, 10.324, 10.355, 10.365, 10.335, 10.347, 10.343, 10.323, 10.322, 10.301, 10.332, 10.33, 10.301, 10.321, 10.309, 10.267, 10.274, 10.288, 10.266, 10.259, 10.228, 10.235, 10.243, 10.209, 10.254, 10.266, 10.158, 10.188, 10.207, 10.163, 10.195, 10.204, 10.152, 10.133, 10.126, 10.139, 10.105, 10.109, 10.118, 10.096, 10.071, 10.071, 10.089, 10.056, 10.066, 10.043, 10.014, 9.963, 9.961, 9.939, 9.926, 9.901, 9.887, 9.862, 9.838, 9.871, 9.795, 9.762, 9.725, 9.737, 9.712, 9.649, 9.661, 9.641, 9.59, 9.555, 9.5, 9.518, 9.443, 9.406, 9.37, 9.395, 9.337, 9.243, 9.223, 9.152, 9.163, 9.106, 9.018, 9.05, 8.983, 8.879, 8.879, 8.738, 8.684, 8.656, 8.654, 8.495, 8.437, 8.356, 8.234, 8.135, 8.121, 8.047, 7.958, 7.819, 7.719, 7.528, 7.413, 7.211, 7.166, 7.026, 6.842, 6.634, 6.559, 6.352, 6.297, 6.149, 6.065, 5.892, 5.748, 5.674, 5.513, 5.478, 5.348, 5.141, 5.109, 4.961, 4.916, 4.743, 4.769, 4.711, 4.588, 4.495, 4.376, 4.368, 4.296, 4.267, 4.148, 4.118, 3.981, 3.985, 3.957, 3.904, 3.898, 3.792, 3.754, 3.716, 3.714, 3.675, 3.537, 3.55, 3.523, 3.485, 3.435, 3.443, 3.291, 3.267, 3.276, 3.293, 3.229, 3.234, 3.186, 3.166, 3.078, 3.072, 3.084, 3.064, 3.015, 2.969, 3.008, 3.006, 2.88, 2.886, 2.893, 2.85, 2.828, 2.793, 2.793, 2.779, 2.773, 2.762, 2.733, 2.755, 2.724, 2.725, 2.609, 2.62, 2.609, 2.578, 2.592, 2.546, 2.549, 2.55, 2.552, 2.539, 2.53, 2.484, 2.485, 2.489, 2.48, 2.477, 2.425, 2.433, 2.431, 2.423, 2.424, 2.433, 2.407, 2.41, 2.401, 2.349, 2.341, 2.268, 2.274, 2.283, 2.281, 2.27, 2.281, 2.271, 2.234, 2.216, 2.236, 2.243, 2.215, 2.233, 2.23, 2.185, 2.206, 2.178, 2.177, 2.184, 2.19, 2.19, 2.181, 2.183, 2.114, 2.143, 2.117, 2.136, 2.125, 2.123, 2.121, 2.137, 2.125, 2.134, 2.149, 2.079, 2.086, 2.091, 2.09, 2.063, 2.101, 2.081, 2.088, 2.088, 2.081, 2.072, 2.082, 2.076, 2.099, 2.092, 2.025, 2.045, 2.029, 2.038, 2.018, 2.025, 2.034, 2.024, 2.06, 2.023, 2.027, 2.017, 2.027, 2.041, 2.032, 2.018, 2.088, 2.085, 2.087, 2.075, 2.062, 2.07, 2.093]
expList=[4.6, 4.578, 4.531, 4.538, 4.429, 4.426, 4.45, 4.347, 4.359, 4.27, 4.281, 4.228, 4.223, 4.247, 4.188, 4.115, 4.129, 4.082, 4.105, 4.034, 3.987, 3.989, 3.992, 3.92, 3.893, 3.914, 3.829, 3.807, 3.822, 3.776, 3.721, 3.757, 3.725, 3.692, 3.668, 3.661, 3.651, 3.569, 3.605, 3.618, 3.552, 3.515, 3.528, 3.515, 3.477, 3.451, 3.43, 3.464, 3.423, 3.335, 3.363, 3.356, 3.339, 3.308, 3.289, 3.292, 3.3, 3.283, 3.22, 3.229, 3.241, 3.26, 3.174, 3.169, 3.133, 3.161, 3.155, 3.096, 3.085, 3.089, 3.067, 3.028, 3.052, 3.047, 3.014, 2.966, 2.99, 2.971, 2.97, 3.005, 2.924, 2.905, 2.923, 2.882, 2.888, 2.894, 2.889, 2.854, 2.833, 2.845, 2.842, 2.854, 2.835, 2.779, 2.799, 2.812, 2.798, 2.83, 2.773, 2.744, 2.751, 2.767, 2.705, 2.762, 2.762, 2.714, 2.723, 2.673, 2.653, 2.654, 2.667, 2.652, 2.659, 2.663, 2.68, 2.614, 2.618, 2.619, 2.574, 2.571, 2.53, 2.566, 2.584, 2.527, 2.575, 2.592, 2.538, 2.561, 2.527, 2.513, 2.511, 2.496, 2.461, 2.461, 2.458, 2.468, 2.416, 2.409, 2.402, 2.42, 2.413, 2.412, 2.399, 2.426, 2.39, 2.415, 2.404, 2.346, 2.362, 2.361, 2.37, 2.37, 2.326, 2.294, 2.312, 2.309, 2.316, 2.322, 2.321, 2.263, 2.274, 2.254, 2.282, 2.262, 2.247, 2.217, 2.212, 2.191, 2.203, 2.211, 2.207, 2.212, 2.227, 2.147, 2.162, 2.174, 2.146, 2.185, 2.165, 2.15, 2.164, 2.098, 2.099, 2.109, 2.118, 2.115, 2.12, 2.103, 2.103, 2.078, 2.087, 2.108, 2.047, 2.066, 2.064, 2.05, 2.054, 2.072, 2.064, 2.061, 2.058, 2.057, 2.069, 2.054, 2.062, 1.996, 2.012, 2.022, 2.013, 2.004, 2.016, 2.013, 2.009, 1.995, 2.018, 2.007, 2.013, 2.005, 2.018, 2.012, 2.01, 2.018, 2.02, 2.027, 2.018, 2.018, 1.965, 1.969, 1.938, 1.979, 1.983, 1.955, 1.961, 1.966, 1.948, 1.987, 1.963, 1.983, 1.961, 1.948, 1.966, 1.983, 1.954, 1.977, 1.988, 1.995, 1.956, 1.966, 1.957, 1.959, 1.964, 1.973, 1.938, 1.96, 1.955, 1.961, 1.949, 1.954, 1.962, 1.962, 1.959, 1.974, 1.968, 1.949, 1.96, 1.963, 1.974, 1.954, 1.923, 1.904, 1.913, 1.899, 1.921, 1.91, 1.895, 1.921, 1.931, 1.97, 1.962, 1.96, 1.956, 1.964, 1.953, 1.957, 1.962, 1.966, 1.951, 1.981, 1.957, 1.957, 1.953, 1.964, 1.963, 1.961, 1.958, 1.963, 1.957, 1.958, 2.001, 2.031, 1.997, 2.012, 2.002, 2.009, 2.009, 2.004, 2.0, 2.004, 2.012, 2.009, 2.007, 2.06, 2.073, 2.032, 2.061, 2.026, 2.017, 2.04, 2.009, 2.012, 2.002, 2.01, 1.991, 2.053, 2.06, 2.07, 2.068, 2.054, 2.046, 2.081, 2.053, 2.063, 2.086, 2.116, 2.118, 2.106, 2.11, 2.122, 2.114, 2.161, 2.17, 2.172, 2.16, 2.165, 2.152, 2.17, 2.168, 2.158, 2.163, 2.168, 2.197, 2.21, 2.183, 2.187, 2.181, 2.208, 2.218, 2.207, 2.222, 2.265, 2.244, 2.254, 2.269, 2.255, 2.314, 2.306, 2.316, 2.294, 2.308, 2.344, 2.344, 2.326, 2.333, 2.338, 2.352, 2.352, 2.346, 2.374, 2.357, 2.414, 2.408, 2.41, 2.408, 2.457, 2.44, 2.495, 2.502, 2.491, 2.54, 2.488, 2.486, 2.518, 2.539, 2.535, 2.529, 2.582, 2.579, 2.578, 2.623, 2.61, 2.666, 2.66, 2.651, 2.667, 2.664, 2.651, 2.716, 2.709, 2.746, 2.72, 2.775, 2.774, 2.796, 2.806, 2.853, 2.869, 2.85, 2.853, 2.879, 2.856, 2.885, 2.947, 2.942, 3.0, 2.989, 3.004, 3.057, 3.073, 3.083, 3.092, 3.084, 3.118, 3.146, 3.174, 3.221, 3.284, 3.267, 3.31, 3.324, 3.317, 3.337, 3.369, 3.394, 3.443, 3.454, 3.518, 3.472, 3.521, 3.563, 3.601, 3.619, 3.632, 3.639, 3.633, 3.72, 3.756, 3.802, 3.865, 3.898, 3.877, 3.913, 3.984, 4.033, 3.998, 4.026, 4.099, 4.158, 4.202, 4.184, 4.25, 4.33, 4.352, 4.349, 4.393, 4.483, 4.501, 4.524, 4.535, 4.64]

print str(expList)

def corrigeGap(lista, valorMin):
    """
    Entradas é a lista e o valorMinimo 
    Retorna a lista transformando todos os valores menores do que o valor minimo em 0
    Ordem de grandeza máximo 8n -> O(n)
    """
    newlista= []
    for c in range(len(lista)):
        if lista[c] <= valorMin:
            newlista.append(c)
    for n in newlista:
        for i in range(7):
            a=(n + 3 - i)
            if   a >= 0 and a < len(lista):
                lista[a] = 0
        
                
    print str(lista)
    return lista

def melhorGap(listaGaps):
    """
    Entrada é uma lista de valores de lacunas e zeros. 
    Retornar um tuple com o primeiro valor sendo o index central do melhor lacuna de não zeros dessa lista, 
    o segundo valor sendo o numero de valores tem essa lacuna, o terceiro o valor da média desses numeros, e o 
    quarto o numero de valores que tem a lista.
    Ordem de grandeza -> O(n²)
    """
    
    melhorTupla=(0, 0, 0, 0)
    tamLista=len(listaGaps)
    for v in range(len(listaGaps)):
        listaNova=[]
        med = 0
        centro=0
        tamLac=0
        if listaGaps[v] > 0:
            for i in range(len(listaGaps)-v):
                if listaGaps[v+i]>0:
                    listaNova.append(listaGaps[v+i])
                else:
                    break
            tamLac=len(listaNova)
            med=sum(listaNova)/len(listaNova)
            centro=v+int(len(listaNova)/2)
            print "gapachado "+str((centro, tamLac, med, tamLista))
            if tamLac>melhorTupla[1] or (tamLac==melhorTupla[1] and med>melhorTupla[2]):
                melhorTupla=(centro, tamLac, med, tamLista)
    
    print str(melhorTupla)        
    return melhorTupla

def melhorGap2(listaGaps):
    """
    Entrada é uma lista de valores de lacunas e zeros. 
    Retornar um tuple com o primeiro valor sendo o index central do melhor lacuna de não zeros dessa lista, 
    o segundo valor sendo o numero de valores tem essa lacuna, o terceiro o valor da média desses numeros, e o 
    quarto o numero de valores que tem a lista.
    Ordem de grandeza -> O(n²)
    """
    
    
    melhorTupla=(0, 0, 0, 0)
    tamLista=len(listaGaps)
    listaNova=[]
    med = 0
    centro=0
    tamLac=0
    listaGaps.append(0)
    for v in range(len(listaGaps)):
        if listaGaps[v] == 0:
            if len(listaNova) > 0:
                tamLac=len(listaNova)
                med=sum(listaNova)/len(listaNova)
                centro=v+int(len(listaNova)/2)
                print "gapachado "+str((centro, tamLac, med, tamLista))
                if tamLac>melhorTupla[1] or (tamLac==melhorTupla[1] and med>melhorTupla[2]):
                    melhorTupla=(centro, tamLac, med, tamLista)
                listaNova=[]
                
        else:
            listaNova.append(listaGaps[v])
            
    
    print str(melhorTupla)     #usado para teste   
    return melhorTupla

print "\n"
listComGap = corrigeGap(expList, 3.0)
print "\n"
print listComGap[0:75]
print "\n"
inicio = time.time()
melhorGap(listComGap)
fim = time.time()
print "melhorlista 1 "+str(fim - inicio)
print "\n"
inicio = time.time()
melhorGap2(listComGap)
fim = time.time()
print "melhorlista 1 "+str(fim - inicio)



